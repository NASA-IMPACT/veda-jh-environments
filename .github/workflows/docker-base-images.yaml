name: docker-base-images

on: workflow_dispatch

jobs:
  build-base-images:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - uses: sergeysova/jq-action@v2

      - name: set git rev-parse head
        id: commitsha_head
        run: |
          TEMP=$(git rev-parse HEAD)
          echo "GIT_REV_HEAD=$TEMP" >> $GITHUB_OUTPUT

      - name: configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.DEPLOY_USER_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEPLOY_USER_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: docker build, tag, and push custom images
        run: |
          #####################
          # get a list of all base Dockerfiles
          DOCKERFILES=$(find ./docker-images/base/* -name "Dockerfile")

          #####################
          # loop through and build ony if image doesn't exist on remote with our tags
          while read DOCKERFILE_PATH; do
            VERSION=$(cat $DOCKERFILE_PATH | grep VERSION | cut -d'=' -f 2)
            NAME_AND_DESC=$(echo $DOCKERFILE_PATH | cut -d'/' -f 4)
            PARENT_DIR=$(echo $DOCKERFILE_PATH | xargs -I{} dirname {})

            # check if repo does not exist
            existing_repo_uri=$(aws ecr-public describe-repositories | jq '.repositories | map(.repositoryUri)' | grep "$NAME_AND_DESC" | xargs)
            echo "###################################"
            echo "$existing_repo_uri"
            echo "###################################"
            if [[ -z "$existing_repo_uri" ]]; then
              aws ecr-public create-repository \
                --repository-name pangeo-notebook \
                --catalog-data=description='veda-base-image',architectures='x86-64',operatingSystems='Linux' \
                --tags=Key='org',Value='veda'
            fi

            # check if image with correct tags does not exist
            DOCKERFILE_DIGEST=$(sha256sum "$DOCKERFILE_PATH" | cut -d' ' -f1)

            #image_exists=$(aws ecr-public describe-images --repository-name "$NAME_AND_DESC" --image-ids=imageTag='$VERSION',imageDigest='$DOCKERFILE_DIGEST')
            #if [ ! -z "$image_exists" ]; then
            #fi

            ###################
            # build image
            pushd $PARENT_DIR
            # login
            aws ecr-public get-login-password | docker login --username AWS --password-stdin public.ecr.aws

            # build image
            docker build -t $existing_repo_arn:$VERSION -t $existing_repo_arn:latest -t $existing_repo_arn:$DOCKERFILE_DIGEST .

            # push image to ECR
            docker push $existing_repo_arn:$VERSION
            popd
          done < <(echo "$DOCKERFILES")
